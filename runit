#!/bin/bash

PROC_FILE='Procfile'
ENV_FILE='.env'
PORT="8080"

function usage() {
     echo "Usage: runit [-c] [-f procfile|Procfile] [-e envfile|.env]"
     echo "       runit {-V|--version|-h|--help}"
     echo ""
     echo "        -c, --check    check if procfile and envfile is correct"
     echo "        -f, --file     chose procfile"
     echo "        -e, --env      chose envfile"
     echo "        -V, --version  display version information"
     echo "        -h, --help     display the usage"
     echo ""
     echo "Run process in the background by Procfile"
     echo ""
}

function verify_file() {
    if [[ "$1" == "${ENV_FILE}" ]]; then
        local pattern="^[0-9a-zA-Z_]+=\S+$"
    elif [[ "$1" == "${PROC_FILE}" ]]; then
        local pattern="^[0-9a-zA-Z_]+:[[:space:]].*$"
    else
        echo "Only can verify ${ENV_FILE} and ${PROC_FILE}"
        return 1
    fi

    local err_num=0
    local count=0
    if [[ -f $1 ]]; then
        while read line; do
            (( count++ ))
            # jump the comment line or blank line
            if [[ ${line//[[:space:]]/""} =~ ^#.*$|^$ ]]; then
                continue
            fi
            # verify the file
            if [[ ! ${line} =~ ${pattern} ]]; then
                (( err_num++ ))
                echo "${ENV_FILE} : line ${count}: ${line} Syntax Error"
            fi
        done < "$1"
    fi

    return ${err_num}
}


function verify() {
    verify_file ${ENV_FILE}
    if [[ $? -gt 0 ]]; then
        echo -e "\033[31m File ${ENV_FILE} is not exist \033[0m"
        exit 1
    fi
    verify_file ${PROC_FILE}
    if [[ $? -gt 0 ]]; then
        echo -e "\033[31m File ${PROC_FILE} is not exist \033[0m"
        exit 1
    fi
}


function run_command() {
    verify
    run_procfile
} 

function load_env_file() { 
    source "$1"
}

function run_procfile() {
    local proc_count=0
    while read line; do
        if [[ ${line} =~ ^[0-9a-zA-Z_]+:[[:space:]].*$ ]]; then
            (( proc_count++ ))
            declare proc_name
            declare proc_cmd
            proc_name=$(echo "${line}" | cut -d : -f 1)
            proc_cmd=$(echo "${line}" | cut -d : -f 2-)
            eval "${proc_cmd} &"
            log "${proc_name}" "${proc_cmd}" "$!" "${proc_count}"
            if [[ "$proc_cmd" =~ PORT ]]; then
                (( PORT++ ))
            fi
        fi
    done < ${PROC_FILE}
    wait
}


function log() {
    case "$(( $4 % 3 ))" in
    0)
        local color="[32m" ;;
    1)
        local color="[33m" ;;
    2) 
        local color="[34m" ;;
    esac
    printf "\033${color}$(date +%H:%M:%S) %-8s | \
        ${2/\$PORT/${PORT}} started with pid $3 \033[0m\n" "$1"
}


function main() {
    while [[ "$1" != "" ]]
    do
        case  "$1" in 
            -h | --help)
                usage
                exit 0
                ;;
            -c | --check)
                verify
                shift 1
                ;;
            -e | --env)
                if [[ "$2" != "" ]]; then
                    ENV_FILE=$2
                    verify
                    load_env_file "${ENV_FILE}"
                    shift 2
                else 
                    usage
                    break
                fi
                ;;
            -f | --file)
                if [[ "$2" != "" ]]; then
                    PROC_FILE=$2
                    shift 2
                else 
                    usage
                    break
                fi
                ;;
            *)
                usage
                break
                ;;
        esac    
    done
    run_command
}

main "$@"
